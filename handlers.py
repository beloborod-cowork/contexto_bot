#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from aiogram.dispatcher.router import Router
from model import init,get_placement,get_string_words
from aiogram.filters import Command,CommandStart,StateFilter,CommandObject
from aiogram.types import Message,CallbackQuery,FSInputFile
from datetime import datetime,timedelta
import asyncio
from database import reset_parameter,fetch_data,insert_data, get_top10, create_chats_db,create_chat_db,insert_data_from_table
from model import init,word_hint
from aiogram.client.bot import Bot
from aiogram import F,exceptions
import buttons
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import string
from promo import process_promo
from logs import logger_handlers
from api_token import ADMINISTRATORS
from load_config import *
from random import randint
from guess_word import g_word
from games import handle_game,handle_crash
from help_texts import*
#-------------------------------------------------------------
GAMES_EMOJI = {
    "–∫—É–±–∏–∫": "üé≤",
    "—Ñ—É—Ç–±–æ–ª": "‚öΩ",
    "–±–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ",
    "–±–æ—É–ª–∏–Ω–≥": "üé≥",
    "–¥–∞—Ä—Ç—Å": "üéØ"
}
CHATS = ["group","supergroup"]
class Word(StatesGroup):
   is_guessing = State()

class Game(StatesGroup):
   bid = State()
   multiplier = State()

all_word_dicts = dict()
similarities = dict()
async def generate_words(bot: Bot,all_word_dict,similarities,bc):

   for id in fetch_data("users","telegram_id"):
         init_word,word_dict = init() #–ø–æ–¥–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤
         all_word_dict[id[0]] = word_dict
         similarities[id[0]] = list()
         reset_parameter("users","word",f"'{init_word}'",condition=f"WHERE telegram_id = {id[0]}")
         if bc == True:
            notifications_enabled = fetch_data("users","notifications_enabled",condition = f"WHERE telegram_id = {id[0]}")
            if notifications_enabled[0][0]==1:
               try:
                  await bot.send_message(id[0],"<b>–í–∞—à–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.</b>")
               except exceptions.TelegramForbiddenError:
                  logger_handlers.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id[0]} - —É –Ω–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–æ—Ç.")
               except exceptions.TelegramBadRequest:
                  pass
   return all_word_dict,similarities
async def schedule_daily_task(bot: Bot,bc: bool = True):
   global all_word_dicts
   global similarities 
   while True:
      with open("data/word_data.json","r",encoding="utf-8") as f:
         all_word_dicts = json.load(f)
      similarities = dict()
      for id in fetch_data("users","telegram_id"):
         similarities[id[0]] = list()
      if all_word_dicts == {}:
         all_word_dicts,similarities = await generate_words(bot,all_word_dicts,similarities,bc)
      else:
         now = datetime.now()
         next_day = datetime(now.year, now.month, now.day, 0, 0, 0) + timedelta(days=1)
         delay = (next_day - now).total_seconds()
         await asyncio.sleep(delay)
         
         reset_parameter("users","attempts",0)
         reset_parameter("users","guessed_word",0)  
         all_word_dicts,similarities = await generate_words(bot,all_word_dicts,similarities,bc)   
         
         logger_handlers.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–≥—Ä–æ–∫–æ–≤ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")
      with open("data/word_data.json","w",encoding="utf-8") as f:
         json.dump(all_word_dicts,f,ensure_ascii=False)

async def reset_word(bot: Bot,id_sender: int,id_receiver: int):
   global similarities
   global all_word_dicts
   init_word,word_dict = init()
   all_word_dicts[id_receiver] = word_dict
   similarities[id_receiver] = list()
   reset_parameter("users","word",f"'{init_word}'",condition=f"WHERE telegram_id = {id_receiver}")
   reset_parameter("users","attempts",0,condition=f"WHERE telegram_id = {id_receiver}")
   reset_parameter("users","guessed_word",0,condition=f"WHERE telegram_id = {id_receiver}")
   await bot.send_message(id_sender,f"–°–±—Ä–æ—Å —Å–ª–æ–≤–∞ –¥–ª—è üÜî{id_receiver} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.")
   await bot.send_message(id_receiver,"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–±—Ä–æ—Å–∏–ª –≤–∞—à–µ —Å–ª–æ–≤–æ.")
   logger_handlers.info(f"–°–±—Ä–æ—Å —Å–ª–æ–≤–∞ –¥–ª—è ID {id_receiver} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.")

router = Router() # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞

new_init_word,new_init_dict = init()

#–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data.startswith("top")) #—Ä–µ–π—Ç–∏–Ω–≥–∏
async def tops(call: CallbackQuery):
   name = call.data.split("_")[1]
   if name == "guessed":
      top_10 = get_top10('username,guessed_words','guessed_words')
      text = "üèÜ<b>–¢–æ–ø-10 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤:</b>\n\n"
      for i,data in enumerate(top_10,0):
        username = data[0]
        guessed_words = data[1]
        text += f"<i>{i+1}. {username} - {guessed_words} —Ä–∞–∑</i>\n"
      await call.message.answer(text)
   elif name == "exp":
      top_10 = get_top10('username,exp,level','exp')
      text = "üèÜ<b>–¢–æ–ø-10 –ø–æ –æ–ø—ã—Ç—É:</b>\n\n"
      for i,data in enumerate(top_10,0):
        username = data[0]
        exp = data[1]
        level = data[2]
        exp_needed = load_rewards()[str(level+1)]["xp_req"]
        text += f"<i>{i+1}. {username} - {level} lvl({exp}/{exp_needed}) </i>\n"
      await call.message.answer(text)

@router.callback_query(F.data.startswith("levelup"))
async def levelup_menu(call: CallbackQuery):
   if call.message.chat.type in CHATS:
      await call.message.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   info = call.data.split("_")
   exp, level = fetch_data("users","exp,level",condition=f"WHERE telegram_id ={call.message.chat.id}")[0]
   rewards = load_rewards()[str(level+1)]
   exp_needed = rewards["xp_req"]
   hints = rewards["hints"]
   coins = rewards["coins"]
   if len(info)>1:
      if exp >= exp_needed:
         reset_parameter("users","level","level+1",condition = f"WHERE telegram_id = {call.message.chat.id}")
         reset_parameter("users","hints",f"hints+{hints}",condition = f"WHERE telegram_id = {call.message.chat.id}")
         reset_parameter("users","coins",f"coins+{coins}",condition = f"WHERE telegram_id = {call.message.chat.id}")
         exp, level = fetch_data("users","exp,level",condition=f"WHERE telegram_id ={call.message.chat.id}")[0]
         rewards = load_rewards()[str(level+1)]
         exp_needed = rewards["xp_req"]
         hints = rewards["hints"]
         coins = rewards["coins"]
         await call.message.edit_text(f"<b>‚è´–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è!\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {level}\n–í–∞—à –æ–ø—ã—Ç: {exp}/{exp_needed}\n–ó–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\nüí°{hints} –ü–æ–¥—Å–∫–∞–∑–æ–∫\nü™ô{coins} –º–æ–Ω–µ—Ç</b>",reply_markup=buttons.levelup_keyboard_menu)
      else:
         await call.message.answer("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞!</b>")
      return

   await call.message.answer(f"<b>‚è´–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è!\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {level}\n–í–∞—à –æ–ø—ã—Ç: {exp}/{exp_needed}\n–ó–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\nüí°{hints} –ü–æ–¥—Å–∫–∞–∑–æ–∫\nü™ô{coins} –º–æ–Ω–µ—Ç</b>",reply_markup=buttons.levelup_keyboard_menu)

@router.callback_query(F.data.startswith("notifications"))
async def settings(call: CallbackQuery):
   if call.message.chat.type in CHATS:
      await call.message.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   if call.data.split("_")[0] == "notifications" and call.data.split("_")[1] == "set":
      reset_parameter("users","notifications_enabled",int(call.data.split("_")[2]),condition=f"WHERE telegram_id = {call.message.chat.id}")
      if call.data.split("_")[2] == "1":
          buttons.switch_btn(buttons.settings_kb,buttons.btn_notification_enabled)
      else: buttons.switch_btn(buttons.settings_kb,buttons.btn_notification_disabled)
      await call.message.edit_reply_markup(reply_markup=buttons.settings_kb)

@router.callback_query(F.data.startswith("help"))
async def help(call: CallbackQuery):
   if call.data.split("_")[0] == "help":
      if call.data.split("_")[1] == "rules":
         await call.message.answer(rules_text)
      elif call.data.split("_")[1] == "hints":
         await call.message.answer(hints_text)
      elif call.data.split("_")[1] == "minigames":
         await call.message.answer(minigames_text)
      elif call.data.split("_")[1] == "levels":
         await call.message.answer(levels_text)
      elif call.data.split("_")[1] == "chatwork":
         await call.message.answer(chatwork_text)
      elif call.data.split("_")[1] == "chat":
         await call.message.answer(chat_text)

@router.callback_query(F.data.startswith("games"))
async def handle_games(call: CallbackQuery,state: FSMContext):
   #if call.message.chat.type in CHATS:
      #await call.message.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      #return
   if len(call.data.split("_")) > 1:
      await state.set_state(Game.bid)
      await state.set_data({"game": call.data.split("_")[1]})
      await call.message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É {call.data.split("_")[1]}. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É(0 - –æ—Ç–º–µ–Ω–∏—Ç—å):")
   else:
      await call.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –º–∏–Ω–∏–∏–≥—Ä! –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä—É –≤–∞–º –ø–æ –¥—É—à–µ.",reply_markup=buttons.games_kb)
#–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥—ã
@router.message(CommandStart())
async def start(msg: Message,state: FSMContext):
  if msg.chat.type != "private":
     await msg.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞.")
     return
  try:
   all_word_dicts[msg.from_user.id] = new_init_dict
   is_user_not_new = fetch_data("users","*",condition=f"WHERE telegram_id = {msg.from_user.id}")
   if not is_user_not_new:
      referrer_id = 'NULL'
      try:
         if (len(msg.text.split(' ')) > 0):
            referrer_id = int(msg.text.split(' ')[1])
      except Exception:
         pass
         
      insert_data("users","telegram_id,username,word,attempts,guessed_words,guessed_word,notifications_enabled,hints,referrer_id",f"{msg.from_user.id},'{msg.from_user.username}','{new_init_word}',0,0,0,1,5,{referrer_id}")
      if referrer_id != 'NULL':
         reset_parameter("users","referrals","referrals + 1",condition=f"WHERE telegram_id = {referrer_id}")
         reset_parameter("users","hints","hints + 3",condition=f"WHERE referrer_id = {referrer_id} AND telegram_id = {msg.from_user.id}")
         reset_parameter("users","hints","hints + 1",condition=f"WHERE telegram_id = {referrer_id}")
         await msg.bot.send_message(referrer_id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username}(ID: {msg.from_user.id}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")
   similarities[msg.from_user.id] = list()
   await msg.answer(f"–ü—Ä–∏–≤–µ—Ç,{msg.from_user.first_name}!\n–≠—Ç–æ –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∏–≥—Ä–∞—Ç—å –≤ Contexto –ø—Ä—è–º–æ –≤ Telegram!\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /word.\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø-20 –≤–∞—à–∏—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /top.",reply_markup=buttons.keyboard_menu)
   await state.set_state(None)
   logger_handlers.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {msg.from_user.id} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É /start.")
  except Exception as e:
     await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ -> @Nonamych.")
     logger_handlers.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /start —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}. –û—à–∏–±–∫–∞ - {e}")


@router.message(Command("word")) #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /word
async def word(message: Message,state: FSMContext):
   if message.chat.type in CHATS:
      await message.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   try:
      await state.set_state(Word.is_guessing)
      await message.answer(f"<b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥–∞–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞! –£–¥–∞—á–∏ –≤–∞–º, {message.from_user.first_name}, –≤ –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏–∏ —Å–ª–æ–≤!</b>")
      logger_handlers.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /word")
   except Exception as e:
      logger_handlers.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /word —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}. –û—à–∏–±–∫–∞ - {e}")
  
@router.message(Command("nickname"))
async def set_nickname(msg: Message):
   if len(msg.text) > 29:
      await msg.answer("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –í–∞—à –Ω–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
   else:

      nickname = " ".join(msg.text.split(" ")[1:])
      edited_nickname = " ".join(nickname.split("\n"))
      reset_parameter("users","username",f"'{edited_nickname}'",condition=f"WHERE telegram_id = {msg.from_user.id}")
      await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º.")

@router.message(Command("top"))

async def top(msg: Message):
    if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
    try:
      placement = get_string_words(similarities[msg.from_user.id],10)
      await msg.answer(placement)
      logger_handlers.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {msg.from_user.id} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É /top.")
    except Exception as e:
       logger_handlers.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /top —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}. –û—à–∏–±–∫–∞ - {e}")
       

@router.message(Command("hint"))
async def hint(msg: Message):
    if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
    try:
      guessed_word = fetch_data("users","word",condition=f"WHERE telegram_id = {msg.chat.id}")[0][0]
      hints = fetch_data("users","hints",condition=f"WHERE telegram_id = {msg.chat.id}")[0][0]
      if hints >0:
         hint = word_hint(all_word_dicts[msg.chat.id],guessed_word,100)
         reset_parameter("users","hints","hints - 1",condition=f"WHERE telegram_id = {msg.chat.id}")
         await msg.answer(hint["text"])
      else:
         await msg.answer("‚ùå<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫.</b>")
      logger_handlers.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {msg.from_user.id} —É—Å–ø–µ—à–Ω–æ –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É /hint –ü–æ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ - {hint}.")
    except Exception as e:
      logger_handlers.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /hint —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}. –û—à–∏–±–∫–∞ - {e}")

@router.message(Command("help"))
async def help(msg: Message):
   await msg.answer(f"{msg.from_user.first_name}, –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å:",reply_markup=buttons.help_kb)

@router.message(Command("promo"))
async def promo(msg: Message):
   promo_name = msg.text.split(" ")[1]
   output = process_promo(promo_name,msg.from_user.id)
   await msg.answer(output)

@router.message(Command("referral"))
async def referral(msg: Message):
   id = msg.from_user.id
   referral_amount = fetch_data("users","referrals",condition=f"WHERE telegram_id = {id}")[0][0]
   await msg.answer(f"üë•<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –±–æ—Ç–∞ Contexto!</b>\n\n–í–∞–º–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ <b><i>{referral_amount}</i></b> –ª—é–¥–µ–π.\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/ContextoGame_Bot?start={id} \n–†–µ—Ñ–µ—Ä–∞–ª –ø–æ–ª—É—á–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 3 üí°–ü–æ–¥—Å–∫–∞–∑–∫–∏, –∞ –≤—ã - 1üí°–ü–æ–¥—Å–∫–∞–∑–∫—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.")

@router.message(Command("–∏–≥—Ä–æ–∫",prefix="."))
async def check_player_status(msg: Message):
   if not msg.reply_to_message:
      await msg.answer("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
      return
   player_id = msg.reply_to_message.from_user.id
   user_data = fetch_data("users","*",condition=f"WHERE telegram_id = {player_id}")
   if not user_data:
      await msg.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.")
      return
   id = user_data[0][0]
   username = user_data[0][1]
   attempts = user_data[0][3]
   guessed_word = "‚úÖ" if user_data[0][5] == 1 else "‚ùå"
   level = user_data[0][13]
   await msg.answer(f"üë§–ü—Ä–æ—Ñ–∏–ª—å {username} | üÜî {id}\n"
                    f"-------------------------------\n"
                    f"‚è´–£—Ä–æ–≤–µ–Ω—å: {level}\n"
                    f"üìñ–ü–æ–ø—ã—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {attempts}\n"
                    f"üèÖ–£–≥–∞–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Å–ª–æ–≤–æ: {guessed_word}\n"
                     "-------------------------------")

@router.message(Command("register_chat"))#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞
async def register_chat(msg: Message):
   admins = await msg.chat.get_administrators()
   owner = next((admin for admin in admins if admin.status == "creator"), None)
   if msg.from_user.id != owner.user.id:
      await msg.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —á–∞—Ç–∞, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç.")
      return
   
   chat_id = msg.chat.id
   chat_exists = fetch_data("chats","*",condition=f"WHERE chat_id = {abs(chat_id)}")
   if not chat_exists:
      create_chats_db()
      create_chat_db(abs(chat_id))
      insert_data_from_table(f"chat_{abs(chat_id)}","user_id,username",f"SELECT telegram_id,username FROM users WHERE telegram_id = {msg.from_user.id}")
      insert_data("chats","chat_id,chat_name",f"{abs(chat_id)},'{msg.chat.full_name}'")
      reset_parameter("users","chat_linked",f"{abs(chat_id)}",condition=f"WHERE telegram_id = {msg.from_user.id}")
      await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —á–∞—Ç!\n"
                     "–¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –º–æ–≥—É—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫ –±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /link_chat")
      return
   await msg.answer("–î–∞–Ω–Ω—ã–π —á–∞—Ç —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
   
@router.message(Command("link_chat"))
async def link_chat(msg: Message):
   if msg.chat.type not in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö.")
      return
   user_id = msg.from_user.id
   chat_id = abs(msg.chat.id)
   chat_info = fetch_data("chats","*",condition=f"WHERE chat_id = {chat_id}")
   if not chat_info:
      await msg.answer("–î–∞–Ω–Ω—ã–π —á–∞—Ç –µ—â–µ –Ω–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. ")
      return
   user_info = fetch_data(f"chat_{chat_id}","*",condition=f"WHERE user_id = {user_id}")
   if not user_info:
      insert_data_from_table(f"chat_{chat_id}","user_id,username",f"SELECT telegram_id,username FROM users WHERE telegram_id = {user_id}")
      reset_parameter("users","chat_linked",f"{chat_id}",condition=f"WHERE telegram_id = {msg.from_user.id}")
      await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!")
      return
   await msg.answer("–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫ —á–∞—Ç—É. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")

#–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("grestart",prefix="."))
async def global_restart(msg: Message):
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   if msg.from_user.id in ADMINISTRATORS:
      await schedule_daily_task(msg.bot)

@router.message(Command("restart"))
async def local_restart(msg: Message):
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   try:
      if msg.from_user.id in ADMINISTRATORS:
         id = int(msg.text.split(" ")[1])
         await reset_word(bot=msg.bot,id_receiver=id,id_sender = msg.from_user.id)
         logger_handlers.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {msg.from_user.id} —Å–±—Ä–æ—Å–∏–ª —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id}.")
   except Exception as e:
      logger_handlers.error(logger_handlers.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /restart —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}. –û—à–∏–±–∫–∞ - {e}"))

@router.message(Command("exp_multiplier"))
async def set_xp_multiplier(msg: Message):
   if msg.from_user.id not in ADMINISTRATORS:
      return
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   multiplier = msg.text.split(" ")[1]
   config = load_config()
   config["exp_multiplier"] = float(multiplier)
   save_config(config)
   await msg.answer("–ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")

@router.message(Command("hfw"))
async def set_xp_multiplier(msg: Message):
   if msg.from_user.id not in ADMINISTRATORS:
      return
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   config = load_config()
   if config["hints_from_words"] == True:
      config["hints_from_words"] = False
      await msg.answer("–¢–µ–ø–µ—Ä—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ –º–æ–≥—É—Ç –≤—ã–ø–∞—Å—Ç—å –∑–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —Å–ª–æ–≤")
   elif config["hints_from_words"] == False:
      config["hints_from_words"] = True
      await msg.answer("–¢–µ–ø–µ—Ä—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –º–æ–≥—É—Ç –≤—ã–ø–∞—Å—Ç—å –∑–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —Å–ª–æ–≤")
   save_config(config)

   
@router.message(Command("hints_add"))
async def hints_add(msg: Message):
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   try:
      if msg.from_user.id in ADMINISTRATORS:
         info = msg.text.split(" ")
         id = int(info[1])
         amount = int(info[2])
         reset_parameter("users","hints",f"hints + {amount}",condition=f"WHERE telegram_id = {id}")
         await msg.answer("–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
         await msg.bot.send_message(id,f"<b>–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount}üí°–ü–æ–¥—Å–∫–∞–∑–æ–∫.</b>")
         logger_handlers.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {msg.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /hints_add. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ü–æ–¥—Å–∫–∞–∑–æ–∫.")
      else: await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.")
   except Exception as e:
      logger_handlers.error(logger_handlers.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /hints_add —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}. –û—à–∏–±–∫–∞ - {e}"))

@router.message(Command("add_promo"))
async def add_promo(msg: Message):
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   try:
      if msg.from_user.id in ADMINISTRATORS:
         info = msg.text.split(" ")[1:]
         name = info[0]
         activations = int(info[1])
         rewards = int(info[2])
         insert_data("promos","name,activations,hints",f"'{name}',{activations},{rewards}")
         await msg.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
         logger_handlers.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {msg.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /add_promo. –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ - {name};–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π = {activations}; –∫–æ–ª-–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {rewards}")
   except Exception as e:
      logger_handlers.error(logger_handlers.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /add_promo —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}. –û—à–∏–±–∫–∞ - {e}"))

@router.message(Command("load_log"))
async def load_log(msg: Message):
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   if msg.from_user.id in ADMINISTRATORS:
      try:
         logger_handlers.info("–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
         await msg.bot.send_document(chat_id=msg.from_user.id,document=FSInputFile(path="data/latest.log"))
         with open('data/latest.log', 'w') as file:
            pass
      except Exception as e:
         logger_handlers.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}")
         await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")

@router.message(Command("bc"))
async def change_broadcast(msg: Message):
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   if msg.from_user.id not in ADMINISTRATORS:
      return
   config = load_config()
   if config["broadcast_when_restarted"] == True:
      config["broadcast_when_restarted"] = False
      await msg.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
   elif config["broadcast_when_restarted"] == False:
      config["broadcast_when_restarted"] = True
      await msg.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ")
   save_config(config)

@router.message(Command("broadcast"))
async def broadcast(msg:Message):
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   broadcasted_msg = " ".join(msg.text.split(" ")[1:])
   for id in fetch_data("users","telegram_id"):
      notifications_enabled = fetch_data("users","notifications_enabled",condition = f"WHERE telegram_id = {id[0]}")
      if notifications_enabled[0][0]==1:
         try:
            await msg.bot.send_message(id[0],broadcasted_msg)
         except exceptions.TelegramForbiddenError:
            logger_handlers.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id[0]} - —É –Ω–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–æ—Ç.")
   await msg.answer("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
   
@router.message(Command("admin_panel"))
async def admin_panel(msg: Message):
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   if msg.from_user.id not in ADMINISTRATORS:
      return
   await msg.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n/grestart: –û–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–æ —É –≤—Å–µ—Ö\n/restart *id*: –û–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–æ —É –∏–≥—Ä–æ–∫–∞ id\n/exp_multiplier *—Ö*: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ö –¥–ª—è –æ–ø—ã—Ç–∞\n/hfw: –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n/hints_add *id* *x*: –Ω–∞—á–∏—Å–ª–∏—Ç—å x –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–≥—Ä–æ–∫—É id\n/add_promo *promo* *x* *y*: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ promo –Ω–∞ x –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Å –Ω–∞–≥—Ä–∞–¥–æ–π –≤ y –ø–æ–¥—Å–∫–∞–∑–æ–∫\n/load_log - –≤—ã–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥ –±–æ—Ç–∞\n/bc: –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–±—Ä–æ—Å —Å–ª–æ–≤–∞ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ\n/broadcast *msg*: —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è msg –≤—Å–µ–º —é–∑–µ—Ä–∞–º –±–æ—Ç–∞")
#–°–ª–æ–≤–µ—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(F.text.lower().contains("—Ä–µ–π—Ç–∏–Ω–≥"))
async def rating(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–π—Ç–∏–Ω–≥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",reply_markup=buttons.rating_kb)



@router.message(F.text.lower().contains("–ø—Ä–æ—Ñ–∏–ª—å"))
async def profile(msg: Message):
   user_data = fetch_data("users","*",condition=f"WHERE telegram_id = {msg.from_user.id}")[0]
   id = user_data[0]
   username = user_data[1]
   attempts = user_data[3]
   guessed_words = user_data[4]
   guessed_word = "‚úÖ" if user_data[5] == 1 else "‚ùå"
   hints = user_data[7]
   exp = user_data[10]
   coins = user_data[11]
   level = user_data[13]
   exp_req = load_rewards()[str(level+1)]["xp_req"]
   chat_linked = user_data[14]
   chat_name = fetch_data("chats","chat_name",condition=f"WHERE chat_id = {chat_linked}")[0][0]
   await msg.answer(f"<b>üë§–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüÜîID: {id}\n‚úçÔ∏è–ù–∏–∫–Ω–µ–π–º: {username}\nüí°–ü–æ–¥—Å–∫–∞–∑–æ–∫: {hints}\n‚è´–£—Ä–æ–≤–µ–Ω—å: {level}\nüìñ–û–ø—ã—Ç: {exp}/{exp_req}\nü™ô–ú–æ–Ω–µ—Ç: {coins}\nüìñ–ü–æ–ø—ã—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {attempts}\nü•á–£–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤: {guessed_words}\nüèÖ–£–≥–∞–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Å–ª–æ–≤–æ: {guessed_word}\n\n–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç: {chat_name}</b>",reply_markup=buttons.inline_keyboard_menu)

@router.message(F.text.lower().contains("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"))
async def settings_menu(msg: Message):
   if msg.chat.type in CHATS:
      await msg.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–∞—Ç–∞—Ö.")
      return
   await msg.answer("<b>‚öôÔ∏è–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>",reply_markup=buttons.settings_kb)

@router.message(StateFilter(Word.is_guessing))
async def guess_word(message: Message,state: FSMContext):
    await g_word(similarities,state,message,all_word_dicts)

@router.message(StateFilter(Game.bid))
async def save_bid(msg: Message, state: FSMContext):
   bid = int(msg.text)
   if bid == 0:
      await msg.answer("–°—Ç–∞–≤–∫–∞ –±—ã–ª–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
      await state.set_state(None)
      return
   game = await state.get_data()
   if game["game"] != "–∫—Ä–∞—à":
      dice = await msg.answer_dice(emoji=GAMES_EMOJI[game["game"]])
      result = await handle_game(game["game"],dice,msg.from_user.id,bid)
      await msg.answer(result)
      await state.set_state(None)
   else:
      await msg.answer("–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã:")
      await state.set_state(Game.multiplier)
      await state.set_data({"bid": bid,"id": msg.from_user.id})
      
   
@router.message(StateFilter(Game.multiplier))
async def play_crash(msg: Message, state: FSMContext):
   bid_data = await state.get_data()
   bid = bid_data["bid"]
   id = bid_data["id"]
   multiplier = float(msg.text)
   await state.set_state(None)
   message_new = await msg.bot.send_message(msg.chat.id,"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: 1.00x")
   
   #await msg.edit_text("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: 1.00x")
   
   await asyncio.sleep(1)
   await handle_crash(message_new,bid,multiplier,id)
   

@router.message()
async def reminder(msg: Message):
   if msg.chat.type in CHATS:
      return
   await msg.answer("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, –Ω–æ –∑–∞–±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /word –±–æ—Ç—É, . –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞!")   

