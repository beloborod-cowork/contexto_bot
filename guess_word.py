from database import reset_parameter,fetch_data
from random import randint
import string
from logs import *
from load_config import load_config
from model import get_placement

async def g_word(similarities,state,message,awd):
    try:
      init_word = fetch_data("users","word",condition=f"WHERE telegram_id = {message.from_user.id}")[0][0]
      if len(message.text.split(" ")) >= 2:
         await message.answer("üòû<b>–í —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.</b>")
         return
      word = message.text.lower()
      if word == init_word:
         
         is_guessed_today = fetch_data("users","guessed_word",condition=f"WHERE telegram_id = {message.from_user.id}")[0][0]
         if is_guessed_today != 1:
            count = fetch_data("users","COUNT(guessed_word)",condition="WHERE guessed_word = 1")[0][0]
            text = f"üéâ<b>–¢—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ {count+1}-–º –∏–∑ –∏–≥—Ä–æ–∫–æ–≤!\n–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞.</b>\n\n"
            coins_given = randint(1,200)
            hint_given = randint(1,2)
            if load_config()["hints_from_words"] == True:
               if hint_given == 1:
                  reset_parameter("users","hints","hints + 1",condition=f"WHERE telegram_id = {message.from_user.id}")
                  text += f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 üí°–ü–æ–¥—Å–∫–∞–∑–∫—É.\n"
            text +=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ ü™ô{coins_given} –º–æ–Ω–µ—Ç."
            reset_parameter("users","guessed_words","guessed_words + 1",condition=f"WHERE telegram_id = {message.from_user.id}")
            reset_parameter("users","guessed_word","1",condition=f"WHERE telegram_id = {message.from_user.id}")
            reset_parameter("users","exp",f"exp + {5000*load_config()["exp_multiplier"]}",condition = f"WHERE telegram_id = {message.from_user.id}")
            
            await message.answer(text)
            await state.set_state(None)
            logger_handlers.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–≥–∞–¥–∞–ª —Å–≤–æ–µ —Å–ª–æ–≤–æ.")
            return
         else:
            await message.answer(f"<b>–í—ã —É–∂–µ –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Å–ª–æ–≤–æ.\n–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞.</b>")
            return
      for char in word:
         if (char in string.ascii_lowercase) or (char in string.punctuation and char != "-"):
            await message.answer("‚ùå<b>–í –≤–∞—à–µ–º —Å–ª–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã/–∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.</b>")
            return
      place = get_placement(word,awd[message.from_user.id])
      if place == -1:
         await message.answer("‚ùå<b>–°–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ.</b>")
         return
      
      reset_parameter("users","attempts","attempts + 1",condition=f"WHERE telegram_id = {message.from_user.id}")
      if (word,place) not in similarities[message.from_user.id]:
         similarities[message.from_user.id].append((word,place))
         similarities[message.from_user.id].sort(key=lambda tup:tup[1])
         reset_parameter("users","exp",f"exp + {(185-place//1000)*load_config()["exp_multiplier"]}",condition = f"WHERE telegram_id = {message.from_user.id}")

      #msg = get_string_words(similarities,20)
      await message.answer(f"<i>{word}</i> - <b>{place}</b>") 
      logger_handlers.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ '{word}'. –ï–≥–æ —Ä–µ–π—Ç–∏–Ω–≥ - {place} –º–µ—Å—Ç–æ.")      
    except Exception as e:
       await message.answer("–°–ª—É—á–∏–ª–∞—Å—å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start, –∑–∞—Ç–µ–º /word –∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É -> @Nonamych.")
       logger_handlers.error(f"–°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}. –û—à–∏–±–∫–∞ - {e}")